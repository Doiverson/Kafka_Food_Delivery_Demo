version: '3.8'

services:
  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Topic Initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic orders
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic order-status
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic delivery-location
        echo 'Kafka topics created successfully'
      "

  # Microservices
  order-service:
    build: ./services/order-service
    container_name: order-service
    ports:
      - "3001:3000"
    environment:
      - KAFKA_BROKER=kafka:29092
      - PORT=3000
      - SERVICE_NAME=order-service
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  restaurant-service:
    build: ./services/restaurant-service
    container_name: restaurant-service
    ports:
      - "3002:3000"
    environment:
      - KAFKA_BROKER=kafka:29092
      - PORT=3000
      - SERVICE_NAME=restaurant-service
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  delivery-service:
    build: ./services/delivery-service
    container_name: delivery-service
    ports:
      - "3003:3000"
    environment:
      - KAFKA_BROKER=kafka:29092
      - PORT=3000
      - SERVICE_NAME=delivery-service
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_ORDER_SERVICE_URL=http://localhost:3001
      - NEXT_PUBLIC_RESTAURANT_SERVICE_URL=http://localhost:3002
      - NEXT_PUBLIC_DELIVERY_SERVICE_URL=http://localhost:3003
    depends_on:
      - order-service
      - restaurant-service
      - delivery-service
    restart: unless-stopped

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:

networks:
  default:
    name: kafka-delivery-network